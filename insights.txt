1. The JPA specification requires that all persistent classes have a no-arg constructor
JPA Rules:
public or protected no-arg constructor must exist. Additional constructors are fine.
Persistent fields should not be public (protected, package visible and private are aloud).
Final persistent attributes or methods are not aloud.

2. You can pass the DTO to the logger and it will print its toString() method

3. We have three mechanisms that Spring Data JPA provides for querying data in a database:
    Query methods (convention methods)
    @Query annotation (with @Modifying for insert,update,delete)
    Custom repository implementation: https://stackoverflow.com/questions/30874214/how-to-access-entity-manager-with-spring-boot-and-spring-data


4. When Spring Boot finds an argument annotated with @Valid, it automatically bootstraps the default JSR 380 implementation — Hibernate Validator — and validates the argument.
When the target argument fails to pass the validation, Spring Boot throws a MethodArgumentNotValidException exception.

5. When you add new methods the dev server cannot pick it up. You have to restart manually.

6. Communication in a three-tier application should be as follows

User (sends DTO) -> Controller (DTO) -> Service (Domain) -> Repository
User             <- (DTO) Controller <- (Domain) Service <- (Domain) Repository

7. Jackson serialization
By default, Jackson 2 will only work with with fields that are either public, or have a public getter methods – serializing an entity that has all fields private or package private will fail:

Also jackson removes "get", "set" and "is" from property getters.
For example "getAge" because "age" in the JSON field.
https://stackoverflow.com/questions/32270422/jackson-renames-primitive-boolean-field-by-removing-is

